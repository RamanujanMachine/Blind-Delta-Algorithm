name: Build for BOINC - Windows

on:
  push

jobs:
  build-win:
    runs-on: windows-latest
    env:
      EXECUTABLE: 'BlindDeltaAlgo.exe'
      # the name of the wrapper to use - these get updated every so often and can be found here https://boinc.berkeley.edu/dl/?C=M;O=D
      WRAPPER: 'wrapper_26016_windows_x86_64'
      # we use this platform string to make our download artifacts unique for the same version across platforms
      PLATFORM: 'win'
      # we use the description to fetch the latest version of the app from the BOINC server apps page
      BOINC_APP_DESCRIPTION: 'blind delta algorithm'
      # has to match one of the platforms in the BOINC server project.xml and https://boinc.berkeley.edu/trac/wiki/BoincPlatforms
      BOINC_PLATFORM: 'windows_x86_64'

    steps:
      - name: "Checkout repository"
        # https://github.com/actions/checkout
        uses: actions/checkout@v4
      - name: "Configure python"
        # https://github.com/actions/setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"
      - name: "Install dependencies and cx-Freeze"
        run: |
            pip install -e .
            pip install --upgrade cx_Freeze
      - name: "Build binary"
        run: | # See https://cx-freeze.readthedocs.io/en/stable/script.html#script
           python generated_boinc_setup.py build
      - name: "Download BOINC wrapper"
        # wrapper documentation is outdated, latest wrapper version can be found here https://boinc.berkeley.edu/dl/?C=M;O=D
        run: |
          curl -O https://boinc.berkeley.edu/dl/$WRAPPER.zip
      - name: "Unzip wrapper"
        run: | 
          unzip $WRAPPER.zip
      - name: "Fetch version number"
        run: |
          curl -O https://rnma.xyz/boinc/apps.php
      - name: "Define new version number"
        run: |
          VERSION=$(sed -n "/<th class=\"bg-primary\" colspan=4>$(printf '%s\n' "$BOINC_APP_DESCRIPTION" | sed 's/[\^$.|?*+(){}]/\\&/g')<\/th>/,/<td>\([0-9].[0-9]\)/p" apps.php | sed -n 's/.*<td>\([0-9][0-9]*\.[0-9]*\)<\/td>.*/\1/ p')
          echo "Last published version of $BOINC_APP_DESCRIPTION is $VERSION"
          MAJOR_VERSION=$(echo $VERSION | cut -d '.' -f1)
          MINOR_VERSION=$(echo $VERSION | cut -d '.' -f2)
          if [ $MINOR_VERSION -eq 99 ]; then
            NEW_MAJOR_VERSION=$((10#$MAJOR_VERSION + 1))
            NEW_MINOR_VERSION="00"
          else
            NEW_MAJOR_VERSION=$MAJOR_VERSION
            NEW_MINOR_VERSION=$((10#$MINOR_VERSION + 1))
          fi
          NEW_VERSION="$NEW_MAJOR_VERSION.$(printf "%02d" $NEW_MINOR_VERSION)"
          echo "New version will be $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      - name: "Zip build output"
        run: |
          cd build/executable
          zip -r ../../app.$NEW_VERSION-$PLATFORM.zip .
      - name: "Create job.xml"
        run: |
          sed -e "s/{{EXECUTABLE}}/$EXECUTABLE/g" boinc/job_template.xml > job.$NEW_VERSION-$PLATFORM.xml
      - name: "Create version.xml"
        run: |
          sed -e "s/{{WRAPPER}}/$WRAPPER/g" -e "s/{{VERSION}}/$NEW_VERSION/g" -e "s/{{PLATFORM}}/$PLATFORM/g" boinc/version_template.xml > version.xml
#      - name: "Sign files"
#        run: |
      - name: "Create app bundle"
        run: |
          zip -r --junk-paths $BOINC_PLATFORM.zip . -i version.xml job.$NEW_VERSION-$PLATFORM.xml $WRAPPER app.$NEW_VERSION-$PLATFORM.zip
      - name: "Upload binary to GitHub"
        uses: actions/upload-artifact@v4
        with:
            name: ${{ env.BOINC_PLATFORM }}.zip
            path: ${{ env.BOINC_PLATFORM }}.zip
            overwrite: true